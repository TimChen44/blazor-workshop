@page "/myorders"
@attribute [Authorize]
@inject OrdersClient OrdersClient

<div style="margin:15px">
    <TemplatedList Loader="@LoadOrders">
        <Loading>Loading...</Loading>
        <Empty>
            <h2>No orders placed</h2>
            <Button href="">Order some pizza</Button>
        </Empty>
        <Item Context="item">
            <ListItem Actions="@(new[] { itemText(("Items:",item.Order.Pizzas.Count().ToString()))
                                 ,itemText(("Total price:",$"￥{item.Order.GetFormattedTotalPrice()}"))
                                 ,itemTrack($"myorders/{item.Order.OrderId}")})">
                <Text Strong>@item.Order.CreatedTime.ToLongDateString()</Text>
            </ListItem>
        </Item>
    </TemplatedList>
</div>

@code {

    RenderFragment<(string title, string value)> itemText = context =>
    @<Template>
        <Space>
            <SpaceItem>@context.title</SpaceItem>
            <Text Strong>@context.value</Text>
        </Space>
    </Template>;

RenderFragment<string> itemTrack = context =>
@<Template>
    <a href="@context">Track &gt;</a>
</Template>;

async Task<IEnumerable<OrderWithStatus>> LoadOrders()
{
var ordersWithStatus = Enumerable.Empty<OrderWithStatus>();
try
{
ordersWithStatus = await OrdersClient.GetOrders();
}
catch (AccessTokenNotAvailableException ex)
{
ex.Redirect();
}
return ordersWithStatus;
}
}
