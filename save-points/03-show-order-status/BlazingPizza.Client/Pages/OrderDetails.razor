@page "/myorders/{orderId:int}"
@attribute [Authorize]
@using System.Threading
@inject OrdersClient OrdersClient
@implements IDisposable

@if (invalidOrder)
{
    <Result Status="warning" Title="Sorry, this order could not be loaded." />
}
else if (orderWithStatus == null)
{
    <Spin Spinning="true">Loading...</Spin>
}
else
{
    <Card Style="margin:15px">
        <TitleTemplate>
            <div style="display: flex; align-items: flex-start;">
                <h2>
                    Order placed @orderWithStatus.Order.CreatedTime.ToShortDateString();
                </h2>
                <Tag Color="green">Status:@orderWithStatus.StatusText</Tag>
            </div>
        </TitleTemplate>
        <Body>
            <Row>
                <AntDesign.Col Span="18">
                    <OrderReview Order="orderWithStatus.Order" />
                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <Map Zoom="13" Markers="orderWithStatus.MapMarkers" />
                </AntDesign.Col>
            </Row>
        </Body>
    </Card>

}

@code {
    [Parameter] public int OrderId { get; set; }

    OrderWithStatus orderWithStatus;
    bool invalidOrder;
    CancellationTokenSource pollingCancellationToken;

    protected override void OnParametersSet()
    {
        // If we were already polling for a different order, stop doing so
        pollingCancellationToken?.Cancel();

        // Start a new poll loop
        PollForUpdates();
    }

    private async void PollForUpdates()
    {
        invalidOrder = false;
        pollingCancellationToken = new CancellationTokenSource();
        while (!pollingCancellationToken.IsCancellationRequested)
        {
            try
            {
                orderWithStatus = await OrdersClient.GetOrder(OrderId);
                StateHasChanged();

                if (orderWithStatus.IsDelivered)
                {
                    pollingCancellationToken.Cancel();
                }
                else
                {
                    await Task.Delay(4000);
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                pollingCancellationToken.Cancel();
                ex.Redirect();
            }
            catch (Exception ex)
            {
                invalidOrder = true;
                pollingCancellationToken.Cancel();
                Console.Error.WriteLine(ex);
                StateHasChanged();
            }
        }
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }
}