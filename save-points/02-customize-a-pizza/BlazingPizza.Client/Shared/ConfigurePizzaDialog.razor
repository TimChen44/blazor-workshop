@inject HttpClient HttpClient
@inherits DrawerTemplate<Pizza, Pizza>

<Divider>Size</Divider>
<div>
    <Slider TValue="double" Min="@Pizza.MinimumSize" Max="@Pizza.MaximumSize" Step="1" @bind-Value="@Pizza.Size" DefaultValue="@Pizza.DefaultSize" />
    <Text Style="margin-top:5px">
        @(Pizza.Size)" (￥@(Pizza.GetFormattedTotalPrice()))
    </Text>
</div>

<Divider>Extra Toppings</Divider>
<div>
    @if (toppings == null)
    {
        <SimpleSelect DefaultValue="(loading...)" Style="width: 100%;" Disabled>
            <SelectOptions>
                <SimpleSelectOption Value="(loading...)" Label="(loading...)"></SimpleSelectOption>
            </SelectOptions>
        </SimpleSelect>
    }
    else if (Pizza.Toppings.Count >= 6)
    {
        <div>(maximum reached)</div>
    }
    else
    {
        <Select Loading="toppings == null" DataSource="@toppings"
                Style="width:100%"
                @bind-Value="selectedTopping"
                TItem="Topping"
                TItemValue="Topping"
                OnSelectedItemChanged="ToppingSelected">
            <SelectOptions>
                @foreach (var item in toppings)
                {
                    <SelectOption TItemValue="Topping" TItem="Topping" Value="@item" Label="@($"{item.Name} - (￥{item.GetFormattedPrice()})")" />
                }
            </SelectOptions>
        </Select>
    }
</div>
<div style="margin-top:5px">
    @foreach (var pizzaTopping in Pizza.Toppings)
    {
        <Tag @key="@pizzaTopping" Mode="closeable" OnClose="()=>RemoveTopping(pizzaTopping)">@pizzaTopping.Topping.Name - @pizzaTopping.Topping.GetFormattedPrice()</Tag>
    }
</div>

<Divider>Price</Divider>
<Statistic Value="@(Pizza.GetFormattedTotalPrice())" Prefix="￥" />

<Divider></Divider>
<div>
    <Button OnClick="OnCancel">Cancel</Button>
    <Button OnClick="OnConfirm">Order</Button>
</div>

@code {
    Topping selectedTopping;

    List<Topping> toppings;

    public Pizza Pizza { get; set; }

    async void OnCancel()
    {
        this.CloseAsync(null);

    }

    async void OnConfirm()
    {
        this.CloseAsync(Pizza);
    }

    protected async override Task OnInitializedAsync()
    {
        Pizza = this.Options;

        toppings = await HttpClient.GetFromJsonAsync<List<Topping>>("toppings");
    }

    private void ToppingSelected(Topping item)
    {
        Console.WriteLine(item);
        if (item != null)
        {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = item });
        }
    }

    void RemoveTopping(PizzaTopping pizzaTopping)
    {
        Pizza.Toppings.Remove(pizzaTopping);
    }
}
